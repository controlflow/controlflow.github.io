---
layout: post
title: "F# indentation-based syntax rules (part 1)"
date: 2010-10-04 13:11:00
categories: 1241744118
tags: fsharp syntax
---
Хочется описать пару занятных особенностей синтаксиса F#, построенного на отступах, о которых не все могут знать. Не смотря на то, что обычно блоки должны располагаться на одном уровне отступа, из этого правила есть исключения:

{% highlight fsharp %}
let x =
      11.1
    + 22.2
    * 33.3
   ** 44.4
    / 55.5
{% endhighlight %}

Инфиксные операторы (на самом деле любые инфиксные *токены*) могут располагаться слева от общего уровня отступа блока, причём левее ровно на количество символов записи оператора, увеличенное на единицу (то есть после оператора допустим только один пробел). Это иногда может позволять лучше вырванивать код, состоящий из кучи применений оператора `(|>)`, например:

{% highlight fsharp %}
/// Функция, не делающая ничего вразумительного
let someFunction count =

      let someSequnce = { 0 .. count }

      someSequnce
   |> Seq.map ((+) 10)
   |> Seq.toList
   |> function
      | [ 10; 11; x ] when x > 11 -> true
      | _                         -> false

   |> printfn "Ответ: %b"
{% endhighlight %}

Существует так же исключение для `and` в `let rec`-биндингах:

{% highlight fsharp %}
let rec xs = { 0 .. 100 }
and ys = { 0 .. 200 }
{% endhighlight %}

Здесь `and` может быть выровнен на одном уровне с `let` и это не будет считаться ошибкой. Внутри определений типов аналогичным поведением обладают токены `|`, `}`, `end` и `and`:

{% highlight fsharp %}
type Foo =
| CaseA
| CaseB
| CaseC

and // ok
    Bar(x : int) = class

    member baz.M() = ()

end // ok

type Baz = { x : int
} // ok
{% endhighlight %}